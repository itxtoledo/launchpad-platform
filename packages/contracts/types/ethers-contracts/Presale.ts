/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface PresaleInterface extends Interface {
    getFunction(nameOrSignature: "claimTokens" | "contribute" | "currentPrice" | "endTime" | "ethContributions" | "factoryAddress" | "hardCap" | "hasSoftCap" | "initialize" | "owner" | "presaleFailed" | "price" | "refund" | "renounceOwnership" | "softCap" | "softCapPrice" | "softCapReached" | "startTime" | "token" | "tokenContributions" | "totalContributed" | "transferOwnership" | "withdrawETH" | "withdrawToken"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "EthRefunded" | "EtherWithdrawn" | "Initialized" | "NewContribution" | "OwnershipTransferred" | "TokenWithdrawn" | "TokensClaimed"): EventFragment;

    encodeFunctionData(functionFragment: 'claimTokens', values?: undefined): string;
encodeFunctionData(functionFragment: 'contribute', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'currentPrice', values?: undefined): string;
encodeFunctionData(functionFragment: 'endTime', values?: undefined): string;
encodeFunctionData(functionFragment: 'ethContributions', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'factoryAddress', values?: undefined): string;
encodeFunctionData(functionFragment: 'hardCap', values?: undefined): string;
encodeFunctionData(functionFragment: 'hasSoftCap', values?: undefined): string;
encodeFunctionData(functionFragment: 'initialize', values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'presaleFailed', values?: undefined): string;
encodeFunctionData(functionFragment: 'price', values?: undefined): string;
encodeFunctionData(functionFragment: 'refund', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'softCap', values?: undefined): string;
encodeFunctionData(functionFragment: 'softCapPrice', values?: undefined): string;
encodeFunctionData(functionFragment: 'softCapReached', values?: undefined): string;
encodeFunctionData(functionFragment: 'startTime', values?: undefined): string;
encodeFunctionData(functionFragment: 'token', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenContributions', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'totalContributed', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawETH', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdrawToken', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'claimTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'contribute', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'currentPrice', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'endTime', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ethContributions', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'factoryAddress', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hardCap', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasSoftCap', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'presaleFailed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'price', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'refund', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'softCap', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'softCapPrice', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'softCapReached', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'startTime', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenContributions', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalContributed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawETH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result;
  }

  
    export namespace EthRefundedEvent {
      export type InputTuple = [user: AddressLike, amount: BigNumberish];
      export type OutputTuple = [user: string, amount: bigint];
      export interface OutputObject {user: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EtherWithdrawnEvent {
      export type InputTuple = [to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [to: string, amount: bigint];
      export interface OutputObject {to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InitializedEvent {
      export type InputTuple = [version: BigNumberish];
      export type OutputTuple = [version: bigint];
      export interface OutputObject {version: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace NewContributionEvent {
      export type InputTuple = [contributor: AddressLike, amount: BigNumberish];
      export type OutputTuple = [contributor: string, amount: bigint];
      export interface OutputObject {contributor: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokenWithdrawnEvent {
      export type InputTuple = [to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [to: string, amount: bigint];
      export interface OutputObject {to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokensClaimedEvent {
      export type InputTuple = [claimer: AddressLike, amount: BigNumberish];
      export type OutputTuple = [claimer: string, amount: bigint];
      export interface OutputObject {claimer: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Presale extends BaseContract {
    
    connect(runner?: ContractRunner | null): Presale;
    waitForDeployment(): Promise<this>;

    interface: PresaleInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    claimTokens: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    contribute: TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    currentPrice: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    endTime: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    ethContributions: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    factoryAddress: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    hardCap: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    hasSoftCap: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    initialize: TypedContractMethod<
      [owner_: AddressLike, token_: AddressLike, price_: BigNumberish, hardCap_: BigNumberish, softCap_: BigNumberish, startTime_: BigNumberish, endTime_: BigNumberish, softCapPrice_: BigNumberish, factoryAddress_: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    presaleFailed: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    price: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    refund: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    softCap: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    softCapPrice: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    softCapReached: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    startTime: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    token: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenContributions: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    totalContributed: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawETH: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    withdrawToken: TypedContractMethod<
      [token_: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'claimTokens'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'contribute'): TypedContractMethod<
      [amount: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'currentPrice'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'endTime'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'ethContributions'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'factoryAddress'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'hardCap'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'hasSoftCap'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'initialize'): TypedContractMethod<
      [owner_: AddressLike, token_: AddressLike, price_: BigNumberish, hardCap_: BigNumberish, softCap_: BigNumberish, startTime_: BigNumberish, endTime_: BigNumberish, softCapPrice_: BigNumberish, factoryAddress_: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'presaleFailed'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'price'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'refund'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'softCap'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'softCapPrice'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'softCapReached'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'startTime'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'token'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenContributions'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalContributed'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawETH'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawToken'): TypedContractMethod<
      [token_: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'EthRefunded'): TypedContractEvent<EthRefundedEvent.InputTuple, EthRefundedEvent.OutputTuple, EthRefundedEvent.OutputObject>;
getEvent(key: 'EtherWithdrawn'): TypedContractEvent<EtherWithdrawnEvent.InputTuple, EtherWithdrawnEvent.OutputTuple, EtherWithdrawnEvent.OutputObject>;
getEvent(key: 'Initialized'): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
getEvent(key: 'NewContribution'): TypedContractEvent<NewContributionEvent.InputTuple, NewContributionEvent.OutputTuple, NewContributionEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'TokenWithdrawn'): TypedContractEvent<TokenWithdrawnEvent.InputTuple, TokenWithdrawnEvent.OutputTuple, TokenWithdrawnEvent.OutputObject>;
getEvent(key: 'TokensClaimed'): TypedContractEvent<TokensClaimedEvent.InputTuple, TokensClaimedEvent.OutputTuple, TokensClaimedEvent.OutputObject>;

    filters: {
      
      'EthRefunded(address,uint256)': TypedContractEvent<EthRefundedEvent.InputTuple, EthRefundedEvent.OutputTuple, EthRefundedEvent.OutputObject>;
      EthRefunded: TypedContractEvent<EthRefundedEvent.InputTuple, EthRefundedEvent.OutputTuple, EthRefundedEvent.OutputObject>;
    

      'EtherWithdrawn(address,uint256)': TypedContractEvent<EtherWithdrawnEvent.InputTuple, EtherWithdrawnEvent.OutputTuple, EtherWithdrawnEvent.OutputObject>;
      EtherWithdrawn: TypedContractEvent<EtherWithdrawnEvent.InputTuple, EtherWithdrawnEvent.OutputTuple, EtherWithdrawnEvent.OutputObject>;
    

      'Initialized(uint64)': TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
      Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    

      'NewContribution(address,uint256)': TypedContractEvent<NewContributionEvent.InputTuple, NewContributionEvent.OutputTuple, NewContributionEvent.OutputObject>;
      NewContribution: TypedContractEvent<NewContributionEvent.InputTuple, NewContributionEvent.OutputTuple, NewContributionEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'TokenWithdrawn(address,uint256)': TypedContractEvent<TokenWithdrawnEvent.InputTuple, TokenWithdrawnEvent.OutputTuple, TokenWithdrawnEvent.OutputObject>;
      TokenWithdrawn: TypedContractEvent<TokenWithdrawnEvent.InputTuple, TokenWithdrawnEvent.OutputTuple, TokenWithdrawnEvent.OutputObject>;
    

      'TokensClaimed(address,uint256)': TypedContractEvent<TokensClaimedEvent.InputTuple, TokensClaimedEvent.OutputTuple, TokensClaimedEvent.OutputObject>;
      TokensClaimed: TypedContractEvent<TokensClaimedEvent.InputTuple, TokensClaimedEvent.OutputTuple, TokensClaimedEvent.OutputObject>;
    
    };
  }