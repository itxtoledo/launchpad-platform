/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
    export type PresaleParamsStruct = {name: string, symbol: string, supply: BigNumberish, price: BigNumberish, hardCap: BigNumberish, softCap: BigNumberish, startTime: BigNumberish, endTime: BigNumberish, softCapPrice: BigNumberish}

    export type PresaleParamsStructOutput = [name: string, symbol: string, supply: bigint, price: bigint, hardCap: bigint, softCap: bigint, startTime: bigint, endTime: bigint, softCapPrice: bigint] & {name: string, symbol: string, supply: bigint, price: bigint, hardCap: bigint, softCap: bigint, startTime: bigint, endTime: bigint, softCapPrice: bigint }
  

  export interface PresaleFactoryInterface extends Interface {
    getFunction(nameOrSignature: "allPresales" | "createPresale" | "getFactoryBalance" | "getPaginatedPresales" | "getPaginatedPresalesDecreasingByCreation" | "getUserCreatedTokens" | "owner" | "presale" | "presaleCreationFee" | "renounceOwnership" | "setPresaleCreationFee" | "token" | "transferOwnership" | "withdrawFees"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "PresaleCreated"): EventFragment;

    encodeFunctionData(functionFragment: 'allPresales', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createPresale', values: [PresaleParamsStruct]): string;
encodeFunctionData(functionFragment: 'getFactoryBalance', values?: undefined): string;
encodeFunctionData(functionFragment: 'getPaginatedPresales', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPaginatedPresalesDecreasingByCreation', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getUserCreatedTokens', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'presale', values?: undefined): string;
encodeFunctionData(functionFragment: 'presaleCreationFee', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'setPresaleCreationFee', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'token', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawFees', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'allPresales', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createPresale', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getFactoryBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPaginatedPresales', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPaginatedPresalesDecreasingByCreation', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserCreatedTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'presale', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'presaleCreationFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setPresaleCreationFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawFees', data: BytesLike): Result;
  }

  
    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PresaleCreatedEvent {
      export type InputTuple = [presale: AddressLike];
      export type OutputTuple = [presale: string];
      export interface OutputObject {presale: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface PresaleFactory extends BaseContract {
    
    connect(runner?: ContractRunner | null): PresaleFactory;
    waitForDeployment(): Promise<this>;

    interface: PresaleFactoryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    allPresales: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    createPresale: TypedContractMethod<
      [params: PresaleParamsStruct, ],
      [void],
      'payable'
    >
    

    
    getFactoryBalance: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getPaginatedPresales: TypedContractMethod<
      [page: BigNumberish, ],
      [string[]],
      'view'
    >
    

    
    getPaginatedPresalesDecreasingByCreation: TypedContractMethod<
      [page: BigNumberish, pageSize: BigNumberish, ],
      [string[]],
      'view'
    >
    

    
    getUserCreatedTokens: TypedContractMethod<
      [user: AddressLike, ],
      [string[]],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    presale: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    presaleCreationFee: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    setPresaleCreationFee: TypedContractMethod<
      [_newFee: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    token: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawFees: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'allPresales'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'createPresale'): TypedContractMethod<
      [params: PresaleParamsStruct, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'getFactoryBalance'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getPaginatedPresales'): TypedContractMethod<
      [page: BigNumberish, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getPaginatedPresalesDecreasingByCreation'): TypedContractMethod<
      [page: BigNumberish, pageSize: BigNumberish, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getUserCreatedTokens'): TypedContractMethod<
      [user: AddressLike, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'presale'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'presaleCreationFee'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setPresaleCreationFee'): TypedContractMethod<
      [_newFee: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'token'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawFees'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'PresaleCreated'): TypedContractEvent<PresaleCreatedEvent.InputTuple, PresaleCreatedEvent.OutputTuple, PresaleCreatedEvent.OutputObject>;

    filters: {
      
      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'PresaleCreated(address)': TypedContractEvent<PresaleCreatedEvent.InputTuple, PresaleCreatedEvent.OutputTuple, PresaleCreatedEvent.OutputObject>;
      PresaleCreated: TypedContractEvent<PresaleCreatedEvent.InputTuple, PresaleCreatedEvent.OutputTuple, PresaleCreatedEvent.OutputObject>;
    
    };
  }